{
  "extends": "./eslint.config.js",
  "rules": {
    // Enforce consistent patterns for OmniFocus MCP
    
    // 1. Disallow 'any' type in return statements
    "@typescript-eslint/no-explicit-any": ["error", {
      "ignoreRestArgs": true,
      "fixToUnknown": false
    }],
    
    // 2. Enforce naming conventions
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "class",
        "format": ["PascalCase"],
        "suffix": ["Tool"],
        "filter": {
          "regex": "Tool$",
          "match": true
        }
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      }
    ],
    
    // 3. Require explicit return types for public methods
    "@typescript-eslint/explicit-function-return-type": ["error", {
      "allowExpressions": true,
      "allowTypedFunctionExpressions": true,
      "allowHigherOrderFunctions": true,
      "allowDirectConstAssertionInArrowFunctions": true,
      "allowConciseArrowFunctionExpressionsStartingWithVoid": false
    }],
    
    // 4. Consistent imports
    "import/order": ["error", {
      "groups": [
        "external",
        "builtin",
        "internal",
        "parent",
        "sibling",
        "index"
      ],
      "pathGroups": [
        {
          "pattern": "zod",
          "group": "external",
          "position": "before"
        },
        {
          "pattern": "../base.js",
          "group": "internal",
          "position": "before"
        },
        {
          "pattern": "../../omnifocus/scripts/**",
          "group": "internal",
          "position": "after"
        },
        {
          "pattern": "../../utils/**",
          "group": "internal",
          "position": "after"
        },
        {
          "pattern": "../schemas/**",
          "group": "internal",
          "position": "after"
        }
      ],
      "newlines-between": "always",
      "alphabetize": {
        "order": "asc",
        "caseInsensitive": true
      }
    }],
    
    // 5. Enforce async/await over promises
    "no-return-await": "off",
    "@typescript-eslint/return-await": ["error", "in-try-catch"],
    "@typescript-eslint/promise-function-async": "error",
    
    // 6. Consistent error handling
    "@typescript-eslint/no-throw-literal": "error",
    
    // 7. File naming
    "unicorn/filename-case": ["error", {
      "cases": {
        "camelCase": true,
        "pascalCase": true,
        "kebabCase": true
      },
      "ignore": [
        "^[A-Z]+\\.md$",
        "^[A-Z]+\\.ts$"
      ]
    }]
  },
  
  "overrides": [
    {
      "files": ["src/tools/**/*.ts"],
      "rules": {
        // Tool-specific rules
        
        // Must extend BaseTool
        "local-rules/extend-base-tool": "error",
        
        // Must use standardized response functions
        "local-rules/use-standard-response": "error",
        
        // Must use this.handleError in catch blocks
        "local-rules/use-handle-error": "error",
        
        // Metadata fields must be snake_case
        "local-rules/metadata-snake-case": "error"
      }
    },
    {
      "files": ["src/tools/schemas/**/*.ts"],
      "rules": {
        // Schema files must export Zod schemas
        "local-rules/export-zod-schema": "error"
      }
    },
    {
      "files": ["tests/**/*.ts", "tests/**/*.js"],
      "rules": {
        // Allow any in tests
        "@typescript-eslint/no-explicit-any": "off",
        
        // Allow console in tests
        "no-console": "off"
      }
    }
  ]
}