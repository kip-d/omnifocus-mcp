
 RUN  v3.2.4 /Users/kip/codex/omnifocus-mcp
      Coverage enabled with v8

 ✓ tests/unit/tools/perspectives-v2.test.ts (8 tests) 12ms
 ✓ tests/unit/tools/tags-v2.test.ts (13 tests) 7ms
 ❯ tests/unit/tools/analytics/workflow-analysis-tool.test.ts (4 tests | 2 failed) 8ms
   ✓ WorkflowAnalysisTool > returns cached results when available 2ms
   ✓ WorkflowAnalysisTool > handles script error result with structured error 1ms
   × WorkflowAnalysisTool > returns analytics response with key findings and optional raw data 4ms
     → expected false to be true // Object.is equality
   × WorkflowAnalysisTool > extractKeyFindings falls back to default message 0ms
     → expected false to be true // Object.is equality
 ❯ tests/unit/tools/project-crud.test.ts (14 tests | 5 failed) 11ms
   ✓ ProjectsToolV2 CRUD Operations > list operation > should list projects 3ms
   ✓ ProjectsToolV2 CRUD Operations > list operation > should use cached results when available 0ms
   × ProjectsToolV2 CRUD Operations > create operation > should create a simple project 4ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 CRUD Operations > create operation > should create a complex project with all options 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 CRUD Operations > create operation > should validate required parameters 0ms
   × ProjectsToolV2 CRUD Operations > update operation > should update project properties 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 CRUD Operations > update operation > should validate required parameters 0ms
   × ProjectsToolV2 CRUD Operations > complete operation > should complete a project 0ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 CRUD Operations > complete operation > should complete a project with all tasks 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 CRUD Operations > delete operation > should delete a project 0ms
   ✓ ProjectsToolV2 CRUD Operations > delete operation > should handle permission denied and use URL scheme fallback 0ms
   ✓ ProjectsToolV2 CRUD Operations > error handling > should handle script execution errors 0ms
   ✓ ProjectsToolV2 CRUD Operations > error handling > should handle invalid operation 0ms
   ✓ ProjectsToolV2 CRUD Operations > tool metadata > should have correct name and description 0ms
 ❯ tests/unit/tools/reviews/manage-reviews.test.ts (6 tests | 3 failed) 8ms
   ✓ ManageReviewsTool > lists projects for review with summary buckets 2ms
   ✓ ManageReviewsTool > returns cached response when available 0ms
   ✓ ManageReviewsTool > handles null result from script 0ms
   × ManageReviewsTool > marks project as reviewed and invalidates caches 4ms
     → expected false to be true // Object.is equality
   × ManageReviewsTool > set_schedule updates multiple projects and invalidates caches 1ms
     → expected false to be true // Object.is equality
   × ManageReviewsTool > clear_schedule clears schedules and invalidates caches 0ms
     → expected false to be true // Object.is equality
 ❯ tests/unit/tools/projects/ProjectsToolV2.test.ts (30 tests | 17 failed) 25ms
   ✓ ProjectsToolV2 > constructor and properties > should have correct name and description 1ms
   ✓ ProjectsToolV2 > constructor and properties > should define input schema with required fields 2ms
   × ProjectsToolV2 > list operation > should list all projects with default parameters 6ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 > list operation > should filter projects by status 1ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 > list operation > should handle needsReview filter 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 > list operation > should use cache when available 0ms
   × ProjectsToolV2 > list operation > should cache successful results 2ms
     → expected "spy" to be called with arguments: [ 'projects', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
   × ProjectsToolV2 > create operation > should create a new project 1ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 > create operation > should validate required name for create 0ms
   × ProjectsToolV2 > create operation > should handle tags during creation 0ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 > update operation > should update an existing project 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 > update operation > should validate required projectId for update 0ms
   × ProjectsToolV2 > update operation > should update project due date 0ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 > complete operation > should complete a project 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 > complete operation > should validate required projectId for complete 0ms
   × ProjectsToolV2 > delete operation > should delete a project 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 > delete operation > should validate required projectId for delete 0ms
   × ProjectsToolV2 > review operation > should list projects needing review 2ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 > active operation > should list only active projects 0ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 > parameter coercion > should coerce string parameters to correct types 0ms
     → expected false to be true // Object.is equality
   × ProjectsToolV2 > parameter coercion > should handle numeric strings for reviewInterval 0ms
     → expected false to be true // Object.is equality
   ✓ ProjectsToolV2 > parameter coercion > should validate limit bounds 1ms
   ✓ ProjectsToolV2 > error handling > should handle script execution errors 1ms
   ✓ ProjectsToolV2 > error handling > should handle permission errors 0ms
   ✓ ProjectsToolV2 > error handling > should handle invalid operation gracefully 0ms
   × ProjectsToolV2 > error handling > should handle project not found errors 0ms
     → expected true to be false // Object.is equality
   × ProjectsToolV2 > metadata > should include metadata in all responses 1ms
     → expected 'projects' to be 'list' // Object.is equality
   ✓ ProjectsToolV2 > metadata > should include cache hit information 0ms
   ✓ ProjectsToolV2 > summary generation > should generate comprehensive summary for list operations 0ms
   × ProjectsToolV2 > summary generation > should include operation-specific summary for create 0ms
     → expected false to be true // Object.is equality
 ❯ tests/unit/tools/system-v2.test.ts (8 tests | 4 failed) 69ms
   ✓ SystemToolV2 > version operation > should return version information 2ms
   ✓ SystemToolV2 > version operation > should handle version info errors 0ms
   × SystemToolV2 > diagnostics operation > should run basic diagnostics 4ms
     → expected false to be true // Object.is equality
   × SystemToolV2 > diagnostics operation > should run diagnostics with custom test script 59ms
     → expected false to be true // Object.is equality
   × SystemToolV2 > diagnostics operation > should handle failed diagnostic tests 1ms
     → expected 'this.diagnosticOmni.executeJson is no…' to be 'Connection failed' // Object.is equality
   × SystemToolV2 > diagnostics operation > should handle complete diagnostic failure 1ms
     → expected 'this.diagnosticOmni.executeJson is no…' to be 'Critical failure' // Object.is equality
   ✓ SystemToolV2 > invalid operation > should return error for invalid operation 0ms
   ✓ SystemToolV2 > tool metadata > should have correct name and description 0ms
 ❯ tests/unit/tools/analytics.test.ts (30 tests | 15 failed) 34ms
   ✓ Analytics Tools > ProductivityStatsTool > basic functionality > should have correct name and description 1ms
   × Analytics Tools > ProductivityStatsTool > basic functionality > should validate schema correctly 6ms
     → expected false to be true // Object.is equality
   ✓ Analytics Tools > ProductivityStatsTool > basic functionality > should reject invalid period values 3ms
   ✓ Analytics Tools > ProductivityStatsTool > basic functionality > should use default values correctly 1ms
   ✓ Analytics Tools > ProductivityStatsTool > caching behavior > should return cached data when available 0ms
   × Analytics Tools > ProductivityStatsTool > caching behavior > should generate correct cache keys 2ms
     → expected "spy" to be called with arguments: [ 'analytics', …(2) ][90m

Number of calls: [1m0[22m
[39m
   × Analytics Tools > ProductivityStatsTool > caching behavior > should cache results correctly 1ms
     → expected false to be true // Object.is equality
   × Analytics Tools > ProductivityStatsTool > calculation accuracy and edge cases > should handle empty data correctly 0ms
     → expected false to be true // Object.is equality
   × Analytics Tools > ProductivityStatsTool > calculation accuracy and edge cases > should handle script errors gracefully 2ms
     → expected 'this.omniAutomation.executeTyped is n…' to contain 'Script execution failed'
   ✓ Analytics Tools > ProductivityStatsTool > calculation accuracy and edge cases > should handle all period options 2ms
   ✓ Analytics Tools > TaskVelocityTool > basic functionality > should have correct name and description 0ms
   × Analytics Tools > TaskVelocityTool > basic functionality > should handle filtering options correctly 2ms
     → expected "spy" to be called with arguments: [ Any<String>, …(1) ][90m

Received: 

[1m  1st spy call:

[22m[2m  [[22m
[32m-   Any<String>,[90m
[31m+   "[90m
[31m+   [90m
[31m+   // Core safe utility functions for OmniFocus automation[90m
[31m+   function safeGet(getter, defaultValue = null) {[90m
[31m+     try {[90m
[31m+       const result = getter();[90m
[31m+       return result !== null && result !== undefined ? result : defaultValue;[90m
[31m+     } catch (e) {[90m
[31m+       return defaultValue;[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+   function formatError(error, context = '') {[90m
[31m+     const errorObj = {[90m
[31m+       error: true,[90m
[31m+       message: error.message || String(error),[90m
[31m+       context: context[90m
[31m+     };[90m
[31m+     [90m
[31m+     if (error.stack) {[90m
[31m+       errorObj.stack = error.stack;[90m
[31m+     }[90m
[31m+     [90m
[31m+     return JSON.stringify(errorObj);[90m
[31m+   }[90m
[31m+   [90m
[31m+   function isValidDate(date) {[90m
[31m+     return date && date.toString() !== 'missing value' && !isNaN(date.getTime());[90m
[31m+   }[90m
[31m+   [90m
[31m+[90m
[31m+   function safeGetDate(getter) {[90m
[31m+     try {[90m
[31m+       const date = getter();[90m
[31m+       if (!date) return null;[90m
[31m+       [90m
[31m+       // Use isValidDate to check if it's a valid Date object[90m
[31m+       if (!isValidDate(date)) return null;[90m
[31m+       [90m
[31m+       return date.toISOString();[90m
[31m+     } catch (e) {[90m
[31m+       return null;[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+[90m
[31m+   function safeGetTags(task) {[90m
[31m+     try {[90m
[31m+       const tags = task.tags();[90m
[31m+       if (!tags) return [];[90m
[31m+       const tagNames = [];[90m
[31m+       for (let i = 0; i < tags.length; i++) {[90m
[31m+         const tagName = safeGet(() => tags[i].name());[90m
[31m+         if (tagName) {[90m
[31m+           tagNames.push(tagName);[90m
[31m+         }[90m
[31m+       }[90m
[31m+       return tagNames;[90m
[31m+     } catch (e) {[90m
[31m+       return [];[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+   // OPTIMIZED: Bridge-aware tag getter for operations that modify tags[90m
[31m+   function safeGetTagsWithBridge(task, app) {[90m
[31m+     try {[90m
[31m+       // Try bridge first for better reliability after tag modifications[90m
[31m+       if (app && app.evaluateJavascript) {[90m
[31m+         const taskId = task.id();[90m
[31m+         const script = '(() => { const t = Task.byIdentifier(\"' + taskId + '\"); return t ? JSON.stringify(t.tags.map(tag => tag.name)) : \"[]\"; })()';[90m
[31m+         const result = app.evaluateJavascript(script);[90m
[31m+         return JSON.parse(result);[90m
[31m+       }[90m
[31m+       [90m
[31m+       // Fallback to JXA[90m
[31m+       return safeGetTags(task);[90m
[31m+     } catch (e) {[90m
[31m+       // Final fallback to JXA[90m
[31m+       return safeGetTags(task);[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+   function safeIsCompleted(task) {[90m
[31m+     try {[90m
[31m+       return task.completed() === true;[90m
[31m+     } catch (e) {[90m
[31m+       return false;[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+   function safeGetProject(task) {[90m
[31m+     try {[90m
[31m+       const project = task.containingProject();[90m
[31m+       if (project) {[90m
[31m+         return {[90m
[31m+           name: safeGet(() => project.name()),[90m
[31m+           id: safeGet(() => project.id())[90m
[31m+         };[90m
[31m+       }[90m
[31m+       return null;[90m
[31m+     } catch (e) {[90m
[31m+       return null;[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+   function safeGetEstimatedMinutes(task) {[90m
[31m+     try {[90m
[31m+       const estimate = task.estimatedMinutes();[90m
[31m+       return typeof estimate === 'number' ? estimate : null;[90m
[31m+     } catch (e) {[90m
[31m+       return null;[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+   function isFlagged(obj) {[90m
[31m+     try {[90m
[31m+       return obj.flagged() === true;[90m
[31m+     } catch (e) {[90m
[31m+       return false;[90m
[31m+     }[90m
[31m+   }[90m
[31m+   [90m
[31m+   [90m
[31m+   (() => {[90m
[31m+     const options = {{options}};[90m
[31m+     [90m
[31m+     try {[90m
[31m+       const app = Application('OmniFocus');[90m
[31m+       const doc = app.defaultDocument();[90m
[31m+     [90m
[31m+     const now = new Date();[90m
[31m+     const velocityData = [];[90m
[31m+     const throughput = {};[90m
[31m+     [90m
[31m+     // Calculate period intervals[90m
[31m+     const intervals = [];[90m
[31m+     const intervalDays = options.period === 'day' ? 1 : options.period === 'week' ? 7 : 30;[90m
[31m+     const numIntervals = options.period === 'day' ? 30 : options.period === 'week' ? 12 : 12;[90m
[31m+     [90m
[31m+     for (let i = 0; i < numIntervals; i++) {[90m
[31m+       const intervalEnd = new Date(now);[90m
[31m+       intervalEnd.setDate(intervalEnd.getDate() - (i * intervalDays));[90m
[31m+       const intervalStart = new Date(intervalEnd);[90m
[31m+       intervalStart.setDate(intervalStart.getDate() - intervalDays);[90m
[31m+       [90m
[31m+       intervals.push({[90m
[31m+         start: intervalStart,[90m
[31m+         end: intervalEnd,[90m
[31m+         created: 0,[90m
[31m+         completed: 0,[90m
[31m+         label: intervalEnd.toLocaleDateString()[90m
[31m+       });[90m
[31m+     }[90m
[31m+     [90m
[31m+     // Analyze tasks[90m
[31m+     const allTasks = doc.flattenedTasks();[90m
[31m+     [90m
[31m+     // Check if allTasks is null or undefined[90m
[31m+     if (!allTasks) {[90m
[31m+       return JSON.stringify({ ok: false, error: { message: \"Failed to retrieve tasks from OmniFocus. The document may not be available or OmniFocus may not be running properly.\", details: \"doc.flattenedTasks() returned null or undefined\" }, v: '1' });[90m
[31m+     }[90m
[31m+     let totalCompleted = 0;[90m
[31m+     let totalCreated = 0;[90m
[31m+     const completionTimes = [];[90m
[31m+     [90m
[31m+     // Limit tasks to prevent timeout[90m
[31m+     const maxTasks = Math.min(allTasks.length, 500);[90m
[31m+     [90m
[31m+     for (let i = 0; i < maxTasks; i++) {[90m
[31m+       const task = allTasks[i];[90m
[31m+       [90m
[31m+       // Skip dropped tasks - they should not be included in velocity calculations[90m
[31m+       try {[90m
[31m+         // Skip dropped tasks if the property exists[90m
[31m+         // Note: dropped() may not be available in all OmniFocus versions[90m
[31m+       } catch (e) {}[90m
[31m+       [90m
[31m+       // Apply filters[90m
[31m+       if (options.projectId) {[90m
[31m+         try {[90m
[31m+           const project = safeGetProject(task);[90m
[31m+           if (!project || project.id !== options.projectId) continue;[90m
[31m+         } catch (e) {[90m
[31m+           continue;[90m
[31m+         }[90m
[31m+       }[90m
[31m+       [90m
[31m+       if (options.tags && options.tags.length > 0) {[90m
[31m+         try {[90m
[31m+           const taskTags = safeGetTags(task);[90m
[31m+           const hasTag = options.tags.some(tag => taskTags.includes(tag));[90m
[31m+           if (!hasTag) continue;[90m
[31m+         } catch (e) {[90m
[31m+           continue;[90m
[31m+         }[90m
[31m+       }[90m
[31m+       [90m
[31m+       // Track completion[90m
[31m+       try {[90m
[31m+         const completionDateStr = safeGetDate(() => task.completionDate());[90m
[31m+         if (completionDateStr) {[90m
[31m+           const completionDate = new Date(completionDateStr);[90m
[31m+           totalCompleted++;[90m
[31m+           [90m
[31m+           // Find which interval this belongs to[90m
[31m+           for (const interval of intervals) {[90m
[31m+             if (completionDate >= interval.start && completionDate < interval.end) {[90m
[31m+               interval.completed++;[90m
[31m+               break;[90m
[31m+             }[90m
[31m+           }[90m
[31m+           [90m
[31m+           // Calculate completion time if we have creation date[90m
[31m+           try {[90m
[31m+             const modifiedDateStr = safeGetDate(() => task.modificationDate());[90m
[31m+             if (modifiedDateStr) {[90m
[31m+               const modifiedDate = new Date(modifiedDateStr);[90m
[31m+               if (modifiedDate < completionDate) {[90m
[31m+                 const completionHours = (completionDate - modifiedDate) / (1000 * 60 * 60);[90m
[31m+                 completionTimes.push(completionHours);[90m
[31m+               }[90m
[31m+             }[90m
[31m+           } catch (e) {}[90m
[31m+         }[90m
[31m+       } catch (e) {}[90m
[31m+       [90m
[31m+       // Track creation (using modification date as proxy)[90m
[31m+       try {[90m
[31m+         const modifiedDateStr = safeGetDate(() => task.modificationDate());[90m
[31m+         if (modifiedDateStr) {[90m
[31m+           const modifiedDate = new Date(modifiedDateStr);[90m
[31m+           for (const interval of intervals) {[90m
[31m+             if (modifiedDate >= interval.start && modifiedDate < interval.end) {[90m
[31m+               interval.created++;[90m
[31m+               totalCreated++;[90m
[31m+               break;[90m
[31m+             }[90m
[31m+           }[90m
[31m+         }[90m
[31m+       } catch (e) {}[90m
[31m+     }[90m
[31m+     [90m
[31m+     // Calculate velocity metrics[90m
[31m+     const recentIntervals = intervals.slice(0, 4);[90m
[31m+     const avgCompleted = recentIntervals.reduce((sum, i) => sum + i.completed, 0) / recentIntervals.length;[90m
[31m+     const avgCreated = recentIntervals.reduce((sum, i) => sum + i.created, 0) / recentIntervals.length;[90m
[31m+     [90m
[31m+     // Calculate median completion time[90m
[31m+     let medianCompletionTime = 0;[90m
[31m+     if (completionTimes.length > 0) {[90m
[31m+       completionTimes.sort((a, b) => a - b);[90m
[31m+       const mid = Math.floor(completionTimes.length / 2);[90m
[31m+       medianCompletionTime = completionTimes.length % 2 === 0 ?[90m
[31m+         (completionTimes[mid - 1] + completionTimes[mid]) / 2 :[90m
[31m+         completionTimes[mid];[90m
[31m+     }[90m
[31m+     [90m
[31m+     // Calculate projections[90m
[31m+     const velocity = avgCompleted / intervalDays;[90m
[31m+     const backlogGrowth = avgCreated - avgCompleted;[90m
[31m+     [90m
[31m+     return JSON.stringify({[90m
[31m+       ok: true,[90m
[31m+       v: '1',[90m
[31m+       data: {[90m
[31m+         velocity: {[90m
[31m+           period: options.period,[90m
[31m+           averageCompleted: avgCompleted.toFixed(1),[90m
[31m+           averageCreated: avgCreated.toFixed(1),[90m
[31m+           dailyVelocity: velocity.toFixed(2),[90m
[31m+           backlogGrowthRate: backlogGrowth.toFixed(1)[90m
[31m+         },[90m
[31m+         throughput: {[90m
[31m+           intervals: intervals.reverse(), // Show chronologically[90m
[31m+           totalCompleted: totalCompleted,[90m
[31m+           totalCreated: totalCreated[90m
[31m+         },[90m
[31m+         breakdown: {[90m
[31m+           medianCompletionHours: medianCompletionTime.toFixed(1),[90m
[31m+           tasksAnalyzed: allTasks.length[90m
[31m+         },[90m
[31m+         projections: {[90m
[31m+           tasksPerDay: velocity.toFixed(2),[90m
[31m+           tasksPerWeek: (velocity * 7).toFixed(1),[90m
[31m+           tasksPerMonth: (velocity * 30).toFixed(1)[90m
[31m+         }[90m
[31m+       }[90m
[31m+     });[90m
[31m+   } catch (error) {[90m
[31m+     return JSON.stringify({ ok: false, error: { message: 'Failed to calculate task velocity: ' + (error && error.toString ? error.toString() : 'Unknown error'), details: error && error.message ? error.message : undefined }, v: '1' });[90m
[31m+   }[90m
[31m+   })();[90m
[31m+ ",[90m
[2m    {[22m
[2m      "options": {[22m
[2m        "days": 14,[22m
[32m-       "groupBy": "week",[90m
[2m        "includeWeekends": false,[22m
[31m+       "period": "week",[90m
[2m      },[22m
[2m    },[22m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m
   ✓ Analytics Tools > TaskVelocityTool > basic functionality > should generate cache keys with all parameters 0ms
   ✓ Analytics Tools > TaskVelocityTool > caching behavior > should handle cache keys without optional parameters 0ms
   × Analytics Tools > TaskVelocityTool > caching behavior > should cache for 1 hour as per implementation 0ms
     → expected false to be true // Object.is equality
   × Analytics Tools > TaskVelocityTool > calculation accuracy > should preserve all velocity calculation results 0ms
     → expected false to be true // Object.is equality
   × Analytics Tools > TaskVelocityTool > calculation accuracy > should handle empty velocity data 0ms
     → expected false to be true // Object.is equality
   ✓ Analytics Tools > OverdueAnalysisTool > basic functionality > should have correct name and description 0ms
   ✓ Analytics Tools > OverdueAnalysisTool > basic functionality > should validate limit parameter correctly 1ms
   ✓ Analytics Tools > OverdueAnalysisTool > basic functionality > should reject invalid limit values 1ms
   ✓ Analytics Tools > OverdueAnalysisTool > basic functionality > should handle all groupBy options 6ms
   ✓ Analytics Tools > OverdueAnalysisTool > caching behavior > should generate correct cache keys 1ms
   × Analytics Tools > OverdueAnalysisTool > caching behavior > should cache for 30 minutes as per implementation 0ms
     → expected false to be true // Object.is equality
   ✓ Analytics Tools > OverdueAnalysisTool > caching behavior > should return cached overdue analysis when available 0ms
   × Analytics Tools > OverdueAnalysisTool > calculation accuracy and edge cases > should handle no overdue tasks 0ms
     → expected false to be true // Object.is equality
   × Analytics Tools > OverdueAnalysisTool > calculation accuracy and edge cases > should preserve all analysis data correctly 0ms
     → expected false to be true // Object.is equality
   ✓ Analytics Tools > OverdueAnalysisTool > calculation accuracy and edge cases > should handle boolean coercion for includeRecentlyCompleted 1ms
   × Analytics Tools > error handling across all analytics tools > should handle execution errors gracefully in ProductivityStatsTool 1ms
     → expected 'this.omniAutomation.executeTyped is n…' to be 'Network error' // Object.is equality
   × Analytics Tools > error handling across all analytics tools > should handle execution errors gracefully in TaskVelocityTool 0ms
     → expected 'this.omniAutomation.executeTyped is n…' to contain 'timeout'
   × Analytics Tools > error handling across all analytics tools > should handle execution errors gracefully in OverdueAnalysisTool 0ms
     → expected 'this.omniAutomation.executeTyped is n…' to be 'Permission denied' // Object.is equality
 ❯ tests/unit/tools/folders.test.ts (21 tests | 10 failed) 22ms
   ✓ Folder Tools > ManageFolderTool > basic functionality > should have correct name and description 1ms
   ✓ Folder Tools > ManageFolderTool > basic functionality > should handle invalid operations 3ms
   × Folder Tools > ManageFolderTool > create operation > should create folder with basic parameters 5ms
     → expected false to be true // Object.is equality
   × Folder Tools > ManageFolderTool > update operation > should update folder with multiple parameters 1ms
     → expected false to be true // Object.is equality
   ✓ Folder Tools > ManageFolderTool > delete operation > should delete folder successfully 1ms
   × Folder Tools > ManageFolderTool > move operation > should move folder successfully 0ms
     → expected false to be true // Object.is equality
   × Folder Tools > ManageFolderTool > set_status operation > should set folder status successfully 0ms
     → expected false to be true // Object.is equality
   ✓ Folder Tools > ManageFolderTool > duplicate operation > should return NOT_IMPLEMENTED error for duplicate operation 0ms
   ✓ Folder Tools > ManageFolderTool > create operation extended > should create folder with all parameters 1ms
   ✓ Folder Tools > ManageFolderTool > create operation extended > should handle create script errors 0ms
   ✓ Folder Tools > ManageFolderTool > create operation extended > should handle create script execution errors 0ms
   × Folder Tools > ManageFolderTool > create operation extended > should handle invalid result format 1ms
     → expected 'CREATE_FAILED' to be 'INVALID_RESULT' // Object.is equality
   ✓ Folder Tools > QueryFoldersTool > basic functionality > should have correct name and description 0ms
   × Folder Tools > QueryFoldersTool > basic functionality > should query folders with basic parameters 1ms
     → expected false to be true // Object.is equality
   × Folder Tools > QueryFoldersTool > basic functionality > should query folders with filters 2ms
     → expected false to be true // Object.is equality
   × Folder Tools > QueryFoldersTool > basic functionality > should get folder by ID 0ms
     → expected false to be true // Object.is equality
   × Folder Tools > QueryFoldersTool > basic functionality > should search folders 0ms
     → expected false to be true // Object.is equality
   ✓ Folder Tools > QueryFoldersTool > caching behavior > should return cached result when available 0ms
   × Folder Tools > QueryFoldersTool > caching behavior > should cache result when not cached 1ms
     → expected "spy" to be called with arguments: [ 'folders', 'folders', …(1) ][90m

Number of calls: [1m0[22m
[39m
   ✓ Folder Tools > QueryFoldersTool > error handling > should handle script execution errors 0ms
   ✓ Folder Tools > QueryFoldersTool > error handling > should handle execution exceptions 0ms
 ❯ tests/unit/tools/tasks/QueryTasksToolV2.test.ts (36 tests | 9 failed) 36ms
   ✓ QueryTasksToolV2 > properties > should have correct name and description 2ms
   × QueryTasksToolV2 > schema validation > should accept valid mode values 7ms
     → expected false to be true // Object.is equality
   ✓ QueryTasksToolV2 > schema validation > should reject invalid mode 3ms
   ✓ QueryTasksToolV2 > schema validation > should accept search parameters 1ms
   ✓ QueryTasksToolV2 > schema validation > should accept project filter 0ms
   ✓ QueryTasksToolV2 > schema validation > should accept tags filter 0ms
   ✓ QueryTasksToolV2 > schema validation > should handle boolean completed parameter 0ms
   ✓ QueryTasksToolV2 > schema validation > should coerce string boolean values 3ms
   ✓ QueryTasksToolV2 > schema validation > should handle dueBy parameter 1ms
   × QueryTasksToolV2 > schema validation > should handle daysAhead parameter 1ms
     → expected false to be true // Object.is equality
   × QueryTasksToolV2 > schema validation > should coerce string daysAhead to number 1ms
     → expected false to be true // Object.is equality
   ✓ QueryTasksToolV2 > schema validation > should enforce daysAhead min/max limits 3ms
   ✓ QueryTasksToolV2 > schema validation > should handle limit parameter 1ms
   ✓ QueryTasksToolV2 > schema validation > should coerce string limit to number 0ms
   ✓ QueryTasksToolV2 > schema validation > should enforce limit min/max bounds 1ms
   ✓ QueryTasksToolV2 > schema validation > should handle details parameter 0ms
   ✓ QueryTasksToolV2 > schema validation > should coerce string details to boolean 0ms
   ✓ QueryTasksToolV2 > schema validation > should use default values 0ms
   ✓ QueryTasksToolV2 > response handling > should return task list with summary 1ms
   ✓ QueryTasksToolV2 > response handling > should handle empty results 0ms
   ✓ QueryTasksToolV2 > response handling > should include metadata in response 0ms
   ✓ QueryTasksToolV2 > mode-specific behavior > should handle search mode 0ms
   × QueryTasksToolV2 > mode-specific behavior > should handle today mode 0ms
     → expected false to be true // Object.is equality
   × QueryTasksToolV2 > mode-specific behavior > should handle overdue mode 0ms
     → expected false to be true // Object.is equality
   × QueryTasksToolV2 > mode-specific behavior > should handle upcoming mode with daysAhead 4ms
     → expected false to be true // Object.is equality
   × QueryTasksToolV2 > mode-specific behavior > should handle flagged mode 1ms
     → expected false to be true // Object.is equality
   ✓ QueryTasksToolV2 > error handling > should handle script execution errors 0ms
   ✓ QueryTasksToolV2 > error handling > should handle null results 0ms
   ✓ QueryTasksToolV2 > error handling > should handle missing summary in response 0ms
   ✓ QueryTasksToolV2 > error handling > should handle permission errors 0ms
   ✓ QueryTasksToolV2 > error handling > should handle timeout errors 1ms
   ✓ QueryTasksToolV2 > caching behavior > should check cache before executing script 0ms
   × QueryTasksToolV2 > caching behavior > should cache successful results 1ms
     → expected false to be true // Object.is equality
   ✓ QueryTasksToolV2 > input normalization > should normalize boolean strings 0ms
   × QueryTasksToolV2 > input normalization > should normalize numeric strings 0ms
     → expected false to be true // Object.is equality
   ✓ QueryTasksToolV2 > input normalization > should handle null and undefined values 0ms
 ✓ tests/unit/code-changes-verification.test.ts (5 tests) 161ms
 ❯ tests/unit/tools/task-crud.test.ts (30 tests | 8 failed) 29ms
   ✓ Task CRUD Operations > CreateTaskTool > successful operations > should create a simple task 4ms
   ✓ Task CRUD Operations > CreateTaskTool > successful operations > should create a task with all optional fields 1ms
   ✓ Task CRUD Operations > CreateTaskTool > successful operations > should handle object response from script 0ms
   ✓ Task CRUD Operations > CreateTaskTool > validation > should reject missing name 2ms
   ✓ Task CRUD Operations > CreateTaskTool > validation > should reject empty name 0ms
   ✓ Task CRUD Operations > CreateTaskTool > validation > should reject invalid date format 0ms
   ✓ Task CRUD Operations > CreateTaskTool > validation > should reject negative estimated minutes 0ms
   ✓ Task CRUD Operations > CreateTaskTool > error handling > should handle script execution error 0ms
   ✓ Task CRUD Operations > CreateTaskTool > error handling > should handle permission denied error 0ms
   × Task CRUD Operations > UpdateTaskTool > successful operations > should update task name 7ms
     → expected "spy" to be called with arguments: [ Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
   × Task CRUD Operations > UpdateTaskTool > successful operations > should update multiple fields 2ms
     → expected false to be true // Object.is equality
   × Task CRUD Operations > UpdateTaskTool > successful operations > should clear due date when clearDueDate is true 0ms
     → expected false to be true // Object.is equality
   ✓ Task CRUD Operations > UpdateTaskTool > successful operations > should handle no updates provided 0ms
   ✓ Task CRUD Operations > UpdateTaskTool > validation > should reject missing taskId 0ms
   ✓ Task CRUD Operations > UpdateTaskTool > validation > should reject empty taskId 0ms
   ✓ Task CRUD Operations > UpdateTaskTool > validation > should reject invalid date format 0ms
   ✓ Task CRUD Operations > UpdateTaskTool > error handling > should handle script execution error 2ms
   × Task CRUD Operations > CompleteTaskTool > successful operations > should complete a task 2ms
     → expected false to be true // Object.is equality
   × Task CRUD Operations > CompleteTaskTool > successful operations > should complete a task with custom completion date 0ms
     → expected false to be true // Object.is equality
   ✓ Task CRUD Operations > CompleteTaskTool > successful operations > should fallback to URL scheme on access denied 0ms
   ✓ Task CRUD Operations > CompleteTaskTool > validation > should reject missing taskId 0ms
   ✓ Task CRUD Operations > CompleteTaskTool > validation > should reject invalid completion date 0ms
   × Task CRUD Operations > CompleteTaskTool > error handling > should handle script execution error 1ms
     → expected { code: 'SCRIPT_ERROR', …(2) } to be true // Object.is equality
   ✓ Task CRUD Operations > CompleteTaskTool > error handling > should handle permission error with exception 0ms
   × Task CRUD Operations > DeleteTaskTool > successful operations > should delete a task 0ms
     → expected false to be true // Object.is equality
   ✓ Task CRUD Operations > DeleteTaskTool > successful operations > should fallback to URL scheme on permission error 0ms
   ✓ Task CRUD Operations > DeleteTaskTool > successful operations > should handle exception-based permission error 0ms
   ✓ Task CRUD Operations > DeleteTaskTool > validation > should reject missing taskId 1ms
   ✓ Task CRUD Operations > DeleteTaskTool > validation > should reject empty taskId 1ms
   × Task CRUD Operations > DeleteTaskTool > error handling > should handle script execution error 1ms
     → expected { code: 'SCRIPT_ERROR', …(2) } to be true // Object.is equality
 ✓ tests/unit/completed-project-tasks.test.ts (11 tests) 11ms
 ✓ tests/unit/omnifocus/OmniAutomation.test.ts (24 tests) 10ms
 ✓ tests/unit/tools/base.test.ts (30 tests) 40ms
 ✓ tests/unit/tools/export.test.ts (32 tests) 18ms
 ✓ tests/unit/tools/list-projects-tool.test.ts (9 tests) 8ms
 ✓ tests/unit/timezone.test.ts (31 tests) 145ms
 ❯ tests/unit/response-format-consistency.test.ts (11 tests | 3 failed) 22ms
   ✓ Response Format Consistency Tests > Standardized Response Structure > should verify all tool responses have consistent structure 4ms
   ✓ Response Format Consistency Tests > Standardized Response Structure > should ensure successful responses have required fields 1ms
   ✓ Response Format Consistency Tests > Standardized Response Structure > should ensure error responses have required fields 1ms
   ✓ Response Format Consistency Tests > Metadata Field Naming Consistency > should use snake_case for all metadata fields 2ms
   ✓ Response Format Consistency Tests > Cache Behavior Consistency > should set from_cache to true when returning cached data 0ms
   × Response Format Consistency Tests > Cache Behavior Consistency > should set from_cache to false when fetching fresh data 7ms
     → expected false to be true // Object.is equality
   ✓ Response Format Consistency Tests > Export Tool Response Consistency > should have nested export structure for export tools 1ms
   × Response Format Consistency Tests > Analytics Tool Response Consistency > should have proper stats structure for analytics tools 1ms
     → expected false to be true // Object.is equality
   × Response Format Consistency Tests > Error Handling Consistency > should use handleError for all error cases 4ms
     → expected 'this.omniAutomation.executeTyped is n…' to contain 'Test error'
   ✓ Response Format Consistency Tests > Error Handling Consistency > should include recovery suggestions for known errors 0ms
   ✓ Response Format Consistency Tests > Type Safety Verification > should have proper TypeScript return types (not any) 0ms
 ✓ tests/unit/cache-manager.test.ts (28 tests) 6ms
 ✓ tests/unit/tools/export-bulk.test.ts (11 tests) 13ms
 ✓ tests/unit/tools/list-tasks-tool.test.ts (7 tests) 5ms
 ✓ tests/unit/tools/recurring.test.ts (14 tests) 9ms
 ✓ tests/unit/omnifocus/RobustOmniAutomation.test.ts (14 tests) 24ms
 ✓ tests/unit/tools/analytics/pattern-analysis-v2.test.ts (3 tests) 6ms
 ✓ tests/unit/utils/response-format-utilities.test.ts (34 tests) 15ms
 ✓ tests/unit/tools/tasks/query-tasks-smart-suggest.test.ts (3 tests) 5ms
 ✓ tests/unit/type-adapters.test.ts (13 tests) 4ms
 ✓ tests/unit/omnifocus/scripts/bridge-template.test.ts (33 tests) 3ms
 ✓ tests/unit/tools/tasks/manage-task-tool.test.ts (6 tests) 5ms
 ✓ tests/unit/tools/folders/folders-consolidated.test.ts (10 tests) 4ms
 ✓ tests/unit/performance-optimizations.test.ts (15 tests) 4ms
 ✓ tests/unit/tools/schemas/project-schemas.test.ts (8 tests) 9ms
 ✓ tests/unit/utils/schema-validation.test.ts (35 tests) 4ms
 ✓ tests/unit/tools/tasks/query-tasks-upcoming.test.ts (3 tests) 11ms
 ✓ tests/unit/omnifocus/scripts/script-builder.test.ts (23 tests) 3ms
 ✓ tests/unit/omnifocus/scripts/ScriptBuilder.test.ts (29 tests) 3ms
 ✓ tests/unit/tools/index-tools-registration.test.ts (1 test) 10ms
 ✓ tests/unit/tools/export/export-tool.test.ts (5 tests) 5ms
 ✓ tests/unit/utils/error-messages.test.ts (10 tests) 2ms
 ✓ tests/unit/utils/logger.test.ts (3 tests) 2ms
 ✓ tests/unit/mcp-client.test.ts (2 tests) 1ms
 ✓ tests/unit/utils/permissions.test.ts (6 tests) 3ms
 ✓ tests/unit/omnifocus/plugins/core-recurring-analyzer.test.ts (5 tests) 2ms
 ✓ tests/unit/omnifocus/plugins/gaming-recurring-analyzer.test.ts (4 tests) 2ms
stdout | tests/unit/tag-conversion.test.ts > Tag Type Conversion Issues > should check for array/object conversion patterns in tag scripts
\nAnalyzing LIST_TAGS_SCRIPT for type conversion issues:
  Found 1 instances of pattern 5: \.map\(
\nAnalyzing MANAGE_TAGS_SCRIPT for type conversion issues:
  Found 2 instances of pattern 1: \.push\([^)]+\)(?!;)
  Found 1 instances of pattern 2: \.addTags\(\[
  Found 1 instances of pattern 3: \.removeTags\(\[
  Found 1 instances of pattern 5: \.map\(

stdout | tests/unit/tag-conversion.test.ts > Tag Type Conversion Issues > should identify complex object serialization
\nFound complex serialization patterns:
  LIST_TAGS: 27 instances
  MANAGE_TAGS: 26 instances
\nFound complex serialization patterns:
  LIST_TAGS: 1 instances

 ✓ tests/unit/tag-conversion.test.ts (3 tests) 13ms
 ✓ tests/unit/task-search-limit.test.ts (3 tests) 2ms
 ✓ tests/unit/tag-operations.test.ts (4 tests) 2ms
 ↓ tests/unit/test-data-management.test.ts (6 tests | 6 skipped)
 ↓ tests/unit/integration.test.ts (7 tests | 7 skipped)

 Test Files  10 failed | 38 passed | 2 skipped (50)
      Tests  76 failed | 612 passed | 13 skipped (701)
   Start at  17:09:31
   Duration  1.60s (transform 1.85s, setup 0ms, collect 6.47s, tests 855ms, environment 5ms, prepare 2.94s)

